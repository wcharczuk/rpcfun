// Code generated by protoc-gen-go.
// source: proto/rpcfun.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/rpcfun.proto

It has these top-level messages:
	Message
	Timestamp
	Status
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	TimestampUTC *Timestamp `protobuf:"bytes,1,opt,name=TimestampUTC" json:"TimestampUTC,omitempty"`
	UUID         string     `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	Text         string     `protobuf:"bytes,3,opt,name=Text" json:"Text,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetTimestampUTC() *Timestamp {
	if m != nil {
		return m.TimestampUTC
	}
	return nil
}

func (m *Message) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Timestamp struct {
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto1.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type Status struct {
	StatusCode int32  `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	StackTrace string `protobuf:"bytes,3,opt,name=StackTrace" json:"StackTrace,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto1.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

func init() {
	proto1.RegisterType((*Message)(nil), "rpcfun.Message")
	proto1.RegisterType((*Timestamp)(nil), "rpcfun.Timestamp")
	proto1.RegisterType((*Status)(nil), "rpcfun.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageReceiver service

type MessageReceiverClient interface {
	Receive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error)
}

type messageReceiverClient struct {
	cc *grpc.ClientConn
}

func NewMessageReceiverClient(cc *grpc.ClientConn) MessageReceiverClient {
	return &messageReceiverClient{cc}
}

func (c *messageReceiverClient) Receive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/rpcfun.MessageReceiver/Receive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageReceiver service

type MessageReceiverServer interface {
	Receive(context.Context, *Message) (*Status, error)
}

func RegisterMessageReceiverServer(s *grpc.Server, srv MessageReceiverServer) {
	s.RegisterService(&_MessageReceiver_serviceDesc, srv)
}

func _MessageReceiver_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReceiverServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcfun.MessageReceiver/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReceiverServer).Receive(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcfun.MessageReceiver",
	HandlerType: (*MessageReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _MessageReceiver_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpcfun.proto",
}

func init() { proto1.RegisterFile("proto/rpcfun.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x25, 0x94, 0x24, 0xea, 0x81, 0xa8, 0x38, 0x31, 0x58, 0x0c, 0xa8, 0xf2, 0xd4, 0x01, 0x15,
	0xa9, 0x88, 0x89, 0x81, 0xa1, 0x2c, 0x0c, 0x2c, 0xc6, 0xf9, 0x01, 0xae, 0x7b, 0x40, 0x85, 0x6a,
	0x47, 0xb6, 0x83, 0xf8, 0xf9, 0x28, 0xb6, 0x13, 0x85, 0xed, 0xbd, 0x77, 0xef, 0xdd, 0x17, 0x60,
	0xeb, 0x6c, 0xb0, 0xf7, 0xae, 0xd5, 0x1f, 0x9d, 0x59, 0x47, 0x82, 0x55, 0x62, 0xfc, 0x0b, 0xea,
	0x37, 0xf2, 0x5e, 0x7d, 0x12, 0x3e, 0xc2, 0x85, 0x3c, 0x1c, 0xc9, 0x07, 0x75, 0x6c, 0x1b, 0xb9,
	0x65, 0xc5, 0xb2, 0x58, 0x9d, 0x6f, 0xae, 0xd6, 0x39, 0x37, 0xd6, 0xc4, 0x3f, 0x1b, 0x22, 0x9c,
	0x35, 0xcd, 0xeb, 0x0b, 0x3b, 0x5d, 0x16, 0xab, 0xb9, 0x88, 0xb8, 0xd7, 0x24, 0xfd, 0x06, 0x36,
	0x4b, 0x5a, 0x8f, 0xf9, 0x13, 0xcc, 0xc7, 0x1c, 0x32, 0xa8, 0x3d, 0x69, 0x6b, 0xf6, 0x3e, 0x8e,
	0x99, 0x89, 0x81, 0xe2, 0x35, 0x94, 0x46, 0x19, 0xeb, 0x63, 0xbf, 0x52, 0x24, 0xc2, 0x77, 0x50,
	0xbd, 0x07, 0x15, 0x3a, 0x8f, 0xb7, 0x00, 0x09, 0x6d, 0xed, 0x9e, 0x62, 0xb8, 0x14, 0x13, 0xa5,
	0xef, 0x9c, 0x0f, 0xca, 0x1b, 0x8d, 0xf7, 0xa5, 0xa4, 0xfe, 0x96, 0x4e, 0x69, 0xca, 0xab, 0x4d,
	0x94, 0xcd, 0x33, 0x2c, 0xb2, 0x55, 0x90, 0xa6, 0xc3, 0x0f, 0x39, 0xbc, 0x83, 0x3a, 0x63, 0x5c,
	0x0c, 0x7f, 0xc8, 0x9e, 0x9b, 0xcb, 0x41, 0x48, 0xc3, 0xf9, 0xc9, 0xae, 0x8a, 0xaf, 0x7d, 0xf8,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x77, 0xca, 0xbb, 0x64, 0x70, 0x01, 0x00, 0x00,
}
